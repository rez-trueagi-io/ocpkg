use reqwest::Client;
use serde::Serialize;
use anyhow::{Result, Context};

#[derive(Serialize)]
struct GitHubWorkflowDispatch {
    ref_: String,
    inputs: Option<std::collections::HashMap<String, String>>,
}

async fn trigger_workflow(repo: &str, workflow_id: &str, token: &str) -> Result<()> {
    let client = Client::new();
    let url = format!("https://api.github.com/repos/{}/actions/workflows/{}/dispatches", repo, workflow_id);

    let dispatch = GitHubWorkflowDispatch {
        ref_: "main".to_string(),
        inputs: None,
    };

    let res = client.post(&url)
        .header("Authorization", format!("Bearer {}", token))
        .header("User-Agent", "Rust-GitHub-Client")
        .json(&dispatch)
        .send()
        .await
        .context("Failed to send request to GitHub API")?;

    if res.status().is_success() {
        Ok(())
    } else {
        anyhow::bail!("GitHub API responded with status: {}", res.status());
    }
}
